--- /examples/rknn_yolov5_demo/src/main.cc	2023-02-07 08:40:08.000000000 +0000
+++ /examples/rknn_yolov5_demo/src/main.cc	2023-10-20 15:58:17.492027000 +0000
@@ -21,6 +21,8 @@
 #include <string.h>
 #include <sys/time.h>
 
+#include <ctime>
+
 #define _BASETSD_H
 
 #include "RgaUtils.h"
@@ -28,6 +30,9 @@
 #include "opencv2/core/core.hpp"
 #include "opencv2/imgcodecs.hpp"
 #include "opencv2/imgproc.hpp"
+#include "opencv2/opencv.hpp"
+#include "opencv2/videoio.hpp"
+#include "opencv2/highgui.hpp"
 #include "postprocess.h"
 #include "rga.h"
 #include "rknn_api.h"
@@ -107,14 +112,88 @@
   return 0;
 }
 
-/*-------------------------------------------
-                  Main Functions
--------------------------------------------*/
-int main(int argc, char** argv)
-{
-  int            status     = 0;
+
+int inputKnn(cv::Mat &orig_img, rknn_context &ctx);
+
+int main(int argc, char** argv){
   char*          model_name = NULL;
+  if (argc != 5) {
+    printf("Usage: %s <rknn model> </dev/viedo number> <vedio width> <vedio height>\n", argv[0]);
+    return -1;
+  }
+  model_name       = (char*)argv[1];
+  int num = atoi((char*)argv[2]);
+  printf("Read video%d ...\n", num);
+  int capWidth = atoi((char*)argv[3]);
+  int capHeight = atoi((char*)argv[4]);
+  
+
+  cv::VideoCapture cap(num);//Declaring an object to capture stream of frames from third camera//
+  if (!cap.isOpened()){ //This section prompt an error message if no video stream is found//
+    printf("No video stream detected");
+    return-1;
+  }
+
+   //Set the resolution
+  cap.set(cv::CAP_PROP_FRAME_WIDTH, capWidth);
+  cap.set(cv::CAP_PROP_FRAME_HEIGHT, capHeight);
+  cap.set(cv::CAP_PROP_FOURCC, cv::VideoWriter::fourcc('M','J','P','G'));
+  int ret = -1;
   rknn_context   ctx;
+  /* Create the neural network */
+  printf("Loading mode...\n");
+  int            model_data_size = 0;
+  printf("load model..\n");
+  unsigned char* model_data      = load_model(model_name, &model_data_size);
+    printf("rkinit.. \n");
+  ret                            = rknn_init(&ctx, model_data, model_data_size, 0, NULL);
+  if (ret < 0) {
+    printf("rknn_init error ret=%d\n", ret);
+    return -1;
+  }
+  printf("rkinit success\n");
+  int fpsCamera = 70;
+  int fpsCapture = 10;
+ 
+  while (true){ //Taking an everlasting loop to show the video//
+      cv::Mat orig_img;
+      printf("start.\n");
+      cap >> orig_img;
+      if (orig_img.empty()){ //Breaking the loop if no video frame is detected//
+          break;
+      }
+      inputKnn(orig_img, ctx);
+      if (orig_img.empty()){ //Breaking the loop if no video frame is detected//
+          break;
+      }
+     
+     
+      
+        
+      
+
+      char c = (char)cv::waitKey(3);
+      if (c == 27)
+      {
+        break; // (27)escape key
+      }
+  }
+  // release
+  ret = rknn_destroy(ctx);
+
+  if (model_data) {
+    free(model_data);
+  }
+
+  cap.release();//Releasing the buffer memory//
+  return 0;
+}
+
+int inputKnn(cv::Mat &orig_img, rknn_context &ctx)
+{
+  int            status     = 0;
+ // char*          model_name = NULL;
+ // rknn_context   ctx;
   size_t         actual_size        = 0;
   int            img_width          = 0;
   int            img_height         = 0;
@@ -134,22 +213,14 @@
   memset(&src, 0, sizeof(src));
   memset(&dst, 0, sizeof(dst));
 
-  if (argc != 3) {
-    printf("Usage: %s <rknn model> <jpg> \n", argv[0]);
-    return -1;
-  }
-
-  printf("post process config: box_conf_threshold = %.2f, nms_threshold = %.2f\n", box_conf_threshold, nms_threshold);
-
-  model_name       = (char*)argv[1];
-  char* image_name = argv[2];
+  
 
-  printf("Read %s ...\n", image_name);
-  cv::Mat orig_img = cv::imread(image_name, 1);
-  if (!orig_img.data) {
-    printf("cv::imread %s fail!\n", image_name);
-    return -1;
-  }
+  //printf("Read %s ...\n", image_name);
+  //cv::Mat orig_img = cv::imread(image_name, 1);
+  //if (!orig_img.data) {
+  //  printf("cv::imread %s fail!\n", image_name);
+  // return -1;
+  //}
   cv::Mat img;
   cv::cvtColor(orig_img, img, cv::COLOR_BGR2RGB);
   img_width  = img.cols;
@@ -157,14 +228,10 @@
   printf("img width = %d, img height = %d\n", img_width, img_height);
 
   /* Create the neural network */
-  printf("Loading mode...\n");
-  int            model_data_size = 0;
-  unsigned char* model_data      = load_model(model_name, &model_data_size);
-  ret                            = rknn_init(&ctx, model_data, model_data_size, 0, NULL);
-  if (ret < 0) {
-    printf("rknn_init error ret=%d\n", ret);
-    return -1;
-  }
+  //printf("Loading mode...\n");
+  //int            model_data_size = 0;
+  //unsigned char* model_data      = load_model(model_name, &model_data_size);
+  
 
   rknn_sdk_version version;
   ret = rknn_query(ctx, RKNN_QUERY_SDK_VERSION, &version, sizeof(rknn_sdk_version));
@@ -175,6 +242,7 @@
   printf("sdk version: %s driver version: %s\n", version.api_version, version.drv_version);
 
   rknn_input_output_num io_num;
+  memset(&io_num,0,sizeof(rknn_input_output_num));
   ret = rknn_query(ctx, RKNN_QUERY_IN_OUT_NUM, &io_num, sizeof(io_num));
   if (ret < 0) {
     printf("rknn_init error ret=%d\n", ret);
@@ -245,8 +313,8 @@
     IM_STATUS STATUS = imresize(src, dst);
 
     // for debug
-    cv::Mat resize_img(cv::Size(width, height), CV_8UC3, resize_buf);
-    cv::imwrite("resize_input.jpg", resize_img);
+   // cv::Mat resize_img(cv::Size(width, height), CV_8UC3, resize_buf);
+   // cv::imwrite("resize_input.jpg", resize_img);
 
     inputs[0].buf = resize_buf;
   } else {
@@ -278,6 +346,7 @@
     out_scales.push_back(output_attrs[i].scale);
     out_zps.push_back(output_attrs[i].zp);
   }
+  printf("before post_process\n");
   post_process((int8_t*)outputs[0].buf, (int8_t*)outputs[1].buf, (int8_t*)outputs[2].buf, height, width,
                box_conf_threshold, nms_threshold, scale_w, scale_h, out_zps, out_scales, &detect_result_group);
 
@@ -296,11 +365,11 @@
     putText(orig_img, text, cv::Point(x1, y1 + 12), cv::FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
   }
 
-  imwrite("./out.jpg", orig_img);
+ // imwrite("./out.jpg", orig_img);
   ret = rknn_outputs_release(ctx, io_num.n_output, outputs);
 
   // loop test
-  int test_count = 10;
+  int test_count = 1;
   gettimeofday(&start_time, NULL);
   for (int i = 0; i < test_count; ++i) {
     rknn_inputs_set(ctx, io_num.n_input, inputs);
@@ -316,15 +385,9 @@
   printf("loop count = %d , average run  %f ms\n", test_count,
          (__get_us(stop_time) - __get_us(start_time)) / 1000.0 / test_count);
 
-  deinitPostProcess();
-
-  // release
-  ret = rknn_destroy(ctx);
-
-  if (model_data) {
-    free(model_data);
-  }
+  //deinitPostProcess();
 
+  
   if (resize_buf) {
     free(resize_buf);
   }
